name: Build and test on PR
# This workflow is triggered by webhook when a PR opens / gets updated on 'develop' branch
on:
  repository_dispatch:
    types: [test_pr]

# Parameters:
# github.event.client_payload.pr_id: string
# github.event.client_payload.pr_sha: string
# github.event.client_payload.pr_title: string
# github.event.client_payload.pr_author_email: string

env:
  ABI_FILTERS_OVERRIDE: x86
  # Environment variable for the repo name, in the format 'Lightricks/Repo'.
  ghprbGhRepository: ${{ github.repository }}
  # Environment variable for the pull request ID.
  ghprbPullId: ${{ github.event.client_payload.pr_id }}
  # The EMULATOR_HOST_FOR_CONTAINER environment variable is different for each docker container, as setup by kubernetes

jobs:
  assemble_and_test:
    name: Build and test PR
    # This job runs on our self-hosted linux runners, labeled 'android'
    runs-on: android
    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: recursive
          # To access submodules in Lightricks repo, we need a personal access token
          token: ${{ secrets.GITHUBCIPAT }}
          ref: refs/pull/${{ github.event.client_payload.pr_id }}/head
      
      - name: Add PR test-run to github 
        run:
          python3 ./tools/jenkins/github_update_status.py "$STATUS_CONTEXT" "$STATUS_DESCRIPTION" "$STATUS_STATE" "$STATUS_DETAILS_URL"
        env:
          ghprbGhRepository: ${{ github.repository }}
          PULL_REQUEST_SHA: ${{ github.event.client_payload.pr_sha }}
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
          STATUS_CONTEXT: Github Actions Test
          STATUS_DESCRIPTION: Testing has started..
          STATUS_STATE: pending
          STATUS_DETAILS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
      - name: Apply GitHub labels
        env:
          # Environment variable holding the Github username.
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          # Environment variable holding the Github password.
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
        run: |
          mkdir -p "build-logs"
          (python3 tools/jenkins/ApplyGithubLabels.py || echo "failed reporting status to github") | tee -a "build-logs/output.log"

      # TODO: Add emulator deletion
      # Every container gets a different value for EMULATOR_PORT variable, so they do not collide
      - name: Setup emulator
        id: setup_emulator
        run: |
          set -x
          # Setup new avd every time with --force
          echo no | avdmanager create avd -n android28 -k "system-images;android-28;default;x86" --force
          emulator -list-avds
          emulator -gpu swiftshader_indirect -no-window -feature GLESDynamicVersion -avd android28 -memory 2048 -partition-size 2048 -cache-size 2048 >/dev/null 2>&1 &

          # bootanim=""
          # timeout_in_seconds=60
          # failcounter=-1

          # while true; do
          #    bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
          #    let "failcounter += 1"
          #    sleep 1

          #    if [[ failcounter -gt timeout_in_seconds ]]; then
          #        echo "Timeout ($timeout_in_seconds seconds) reached; failed to start emulator"
          #        exit 1
          #    fi

          #    if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
          #        || "$bootanim" =~ "running" || "$bootanim" =~ "no emulators found" ]]; then
          #        echo "Waiting for emulator to start. failed $failcounter times"
          #        continue
          #    elif [[ "$bootanim" =~ "stopped" ]]; then
          #        echo "Emulator is ready"
          #        break
          #    else
          #        echo "Error booting emulator"
          #        echo "$bootanim"
          #        exit 1
          #    fi
          #done

      - name: Gradle clean
        run: ./gradlew clean
        
      - name: Build and test modified modules with gradle
        env:
          # Environment variable holding the Github username.
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          # Environment variable holding the Github password.
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
        # Note that this will run tests only on the emulator device defined by the ANDROID_SERIAL variable
        run: python3 ./tools/jenkins/build_modified_modules.py "$GITHUB_WORKSPACE"

      - name: Update PR status on failure
        if: ${{ failure() || cancelled() }}
        run:
          python3 ./tools/jenkins/github_update_status.py "$STATUS_CONTEXT" "$STATUS_DESCRIPTION" "$STATUS_STATE" "$STATUS_DETAILS_URL"
        env:
          ghprbGhRepository: ${{ github.repository }}
          PULL_REQUEST_SHA: ${{ github.event.client_payload.pr_sha }}
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
          STATUS_CONTEXT: Github Actions Test
          STATUS_DESCRIPTION: Test failed
          STATUS_STATE: failure
          STATUS_DETAILS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Update PR status on success
        if: ${{ success() }}
        run:
          python3 ./tools/jenkins/github_update_status.py "$STATUS_CONTEXT" "$STATUS_DESCRIPTION" "$STATUS_STATE" "$STATUS_DETAILS_URL"
        env:
          ghprbGhRepository: ${{ github.repository }}
          PULL_REQUEST_SHA: ${{ github.event.client_payload.pr_sha }}
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
          STATUS_CONTEXT: Github Actions Test
          STATUS_DESCRIPTION: Test success! :)
          STATUS_STATE: success
          STATUS_DETAILS_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Post test results on GitHub
        if: ${{ failure() || success() }}
        env:
          # Environment variable holding the Github username.
          DANGER_GITHUB_API_USER: ${{ secrets.GITHUBCIUSER }}
          # Environment variable holding the Github password.
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUBCIPAT }}
        run: python3 tools/jenkins/ReportBuildStatus.py "$GITHUB_WORKSPACE" || echo "failed reporting status to github"

      - name: Upload unit-test logs to GitHub
        if: ${{ failure() || success() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-logs
          path: ./**/build/test-results/**/*.xml

      - name: Kill emulator
        if: ${{ always() }}
        run: |
          python3 tools/jenkins/terminate_emulators.py
