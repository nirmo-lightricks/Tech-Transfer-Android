name: App Distribution Facetune
env:
  KEY: release
  KEY_PASSWORD: ${{secrets.KEY_PASSWORD}}
  KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
  ABI_FILTERS_OVERRIDE: armeabi-v7a:arm64-v8a
on:
  workflow_dispatch:
    inputs:
      buildBranch:
        description: 'From which branch the release is built'
        required: true
        default: 'develop'
      publish:
        description: 'Select where to publish this build, if successful. <p>archive - Saved under <code>/Artifacts/Facetune Android/</code> on skydive and <code>Lightriks/Tech/Artifacts/Facetune Android</code> on Google Drive.</p><p>firebase - Uploaded to Firebase App Distribution. Suitable for internal distribution and testing.</p>'
        required: true
        default: 'firebase,archive'
      firebaseAppDistributionGroups:
        description: 'The tester groups you want to distribute builds to (see Manage testers in Firebase Console). Groups are specified using group aliases, which you can find in the Testers tab in the Firebase App Distribution console. You can specify the groups as a comma-separated list of group aliases.'
        required: false
        default: 'internal-testers'
  
jobs:
  facetune_distribution:
    name: "Facetune for Android release builds"
    runs-on: android
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.3.2
        with:
          lfs: true
          submodules: recursive
          # To access submodules in Lightricks repo, we need a personal access token
          token: ${{ secrets.GITHUBCIPAT }}
          ref: ${{github.event.inputs.buildBranch}}
      - name: Set technical version
        env:
          NUM: ${{ github.run_number }}
        run: echo ::set-env name=TECHNICAL_VERSION::$(($NUM+1200))
      - run: echo $TECHNICAL_VERSION
      - name: Set FIREBASE_APPLICATION_CREDENTIALS
        run: echo '::set-env name=FIREBASE_APPLICATION_CREDENTIALS::'`python3 tools/runner_provision/secret_file_utils.py env2text SEC`
        env:
          SEC: ${{secrets.FACETUNE_FIREBASE_APP_DISTRIBUTION_SERVICE_ACCOUNT}}
      - name: Set KEYSTORE
        run: echo '::set-env name=KEYSTORE::'`python3 tools/runner_provision/secret_file_utils.py text2bin SEC`
        env:
          SEC: ${{secrets.FACETUNE_KEYSTORE_BASE64}}
      - name: Gradle Clean
        run: ./gradlew clean
      - name: Gradle Bundle Release
        run: ./gradlew :facetune:bundleGmsRelease
      - name: Upload symbol file with gradle
        run: ./gradlew :facetune:uploadCrashlyticsSymbolFileGmsRelease
      - name: Create APK from Bundle
        run:  python3 tools/runner_provision/app_distribution_workflow/run_bundletool.py facetune
      - name: Copy fles to dist
        run: python3 tools/runner_provision/app_distribution_workflow/move_files_to_dist.py facetune $TECHNICAL_VERSION
      - name: Firebase upload
        if: ${{contains(github.event.inputs.publish, 'firebase')}}
        run: ./gradlew :facetune:appDistributionUploadGmsRelease
        env:
          FIREBASE_APP_DISTRIBUTION_GROUPS: ${{github.event.inputs.firebaseAppDistributionGroups}}
          GOOGLE_APPLICATION_CREDENTIALS: ${{env.FIREBASE_APPLICATION_CREDENTIALS}}
      - name: Archive upload
        if: ${{contains(github.event.inputs.publish, 'archive')}}
        uses: actions/upload-artifact@v2
        with:
          name: android_binaries
          path: facetune/build/dist
      - name: Cleanup
        if: ${{always()}}
        run: rm $KEYSTORE $FIREBASE_APPLICATION_CREDENTIALS
        
